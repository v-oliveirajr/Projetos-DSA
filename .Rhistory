?html_table
tabela <- pagina %>% html_table(header=T,trim=T,fill=T)
tabela
# Exercício 5 - Converta o item anterior em um dataframe
tabela2 <- bind_rows(tabela)
tabela2[1,]
View(tabela2)
# Exercício 6 - Remova as duas primeiras linhas e adicione nomes as colunas
?vector
a<- vector("logical",length = ncol(tabela2))
a
for (i in 1:ncol(tabela2)){
a [i] <- tabela2[1,i]
}
a
names(tabela2)<- a
tabela2[1,] <- tabela2[-1,]
tabela2
View(tabela2)
# Exercício 7 - Converta de algarismos romanos para números inteiros
tabela2[,1] <- as.roman(tabela2[,1])
str(tabela2)
tabela2
tabela2[,1] <- as.numeric(tabela2[,1])
tabela2
str(tabela2)
# Exercício 8 - Divida as colunas em 4 colunas
?separate
tabela3 <- separate(tabela2,"RESULT",into = c("TEAM1","TEAM2"),sep = ",")
View(tabela3)
tabela3[,1] <- as.numeric(tabela3[,1])
a
# Exercício 9 - Inclua mais 2 colunas com o score dos vencedores e perdedores
# Dica: Você deve fazer mais uma divisão nas colunas
?separate
tabela4 <- separate(tabela3,"TEAM",into = c("TEAM_1","SCORE",sep=2))
separate(tabela3,"TEAM2",into = c("TEAM_2","SCORE",sep=-3))
tabela3$WinnerScore <- as.numeric(str_extract(tabela3$TEAM1,"\\d+$"))
tabela3$LoserScore <- as.numeric(str_extract(tabela3$TEAM2,"\\d+$"))
?str_extract
?gsub
tabela3[,4] <- gsub("\\d+$","",tabela3[,4])
tabela3[,5] <- gsub("\\d+$","",tabela3[,5])
View(tabela3)
tabela
View(tabela)
# Exercício 4 - Extraímos a página web abaixo para você. Agora faça a coleta da tag "table"
url <- 'http://espn.go.com/nfl/superbowl/history/winners'
pagina <- read_html(url)
tabela <- pagina %>% html_table(header=T,trim=T,fill=T)
tabela
View(tabela)
tabela2 <- bind_rows(tabela)
tabela2[1,]
View(tabela2)
View(tabela3)
# Pacote rvest - útil para quem não conhece HTML e CSS
install.packages('rvest')
library(rvest)
library(stringr)
library(dplyr)
library(lubridate)
library(readr)
# Leitura da web page - Retorna um documento xml
webpage <- read_html("https://www.nytimes.com/interactive/2017/06/23/opinion/trumps-lies.html")
webpage
# Extraindo os registros
# Cada elemento na web page acima tem o seguinte formato em html:
# <span class="short-desc"><strong> DATE </strong> LIE <span class="short-truth"><a href="URL"> EXPLANATION </a></span></span>
?html_nodes
results <- webpage %>% html_nodes(".short-desc")
results
# Construindo o dataset
records <- vector("list", length = length(results))
records
for (i in seq_along(results)) {
date <- str_c(results[i] %>%
html_nodes("strong") %>%
html_text(trim = TRUE), ', 2017')
lie <- str_sub(xml_contents(results[i])[2] %>% html_text(trim = TRUE), 2, -2)
explanation <- str_sub(results[i] %>%
html_nodes(".short-truth") %>%
html_text(trim = TRUE), 2, -2)
url <- results[i] %>% html_nodes("a") %>% html_attr("href")
records[[i]] <- data_frame(date = date, lie = lie, explanation = explanation, url = url)
}
# Dataset final
df <- bind_rows(records)
# Transformando o campo data para o formato Date em R
df$date <- mdy(df$date)
df
View(df)
pop_data <- na.omit(flights)%>%
select(carrier,arr_delay)%>%
filter(carrier == "UA" | carrier == "DL")
library('ggplot2')
library('dplyr')
library('nycflights13')
pop_data <- na.omit(flights)%>%
select(carrier,arr_delay)%>%
filter(carrier == "UA" | carrier == "DL")
DL <- slice_sample(filter(pop_data,carrier = 'DL',arr_delay > 0),1000)
DL <- slice_sample(filter(pop_data,carrier == 'DL',arr_delay > 0),1000)
DL <- sample_n(filter(pop_data,carrier == 'DL',arr_delay > 0),1000)
View(DL)
UA <- sample_n(filter(pop_data,carrier == 'UA',arr_delay > 0),1000)
View(UA)
se = sd(DL$arr_delay) / sqrt(nrow(DL))
mean(DL$arr_delay)
# Limites inferior e superior
lower = mean(DL$arr_delay) - 1.96 * se
upper = mean(DL$arr_delay) + 1.96 * se
ic_dl = c(lower,upper)
ic_dl
# Repete o processo para a outra companhia
se = sd(UA$arr_delay) / sqrt(nrow(UA))
mean(UA$arr_delay)
lower = mean(UA$arr_delay) - 1.96 * se
upper = mean(UA$arr_delay) + 1.96 * se
ic_ua = c(lower,upper)
ic_ua
t.test(DL$arr_delay, UA$arr_delay, alternative="greater")
library(Plothtests)
install.packages("Plothtests")
result = t.test(DL$arr_delay, UA$arr_delay, alternative="greater")
plot(result)
install.packages("gginference")
library(gginference)
ggttest(t.test(DL$arr_delay, UA$arr_delay, alternative="greater"))
library(readr)
library(data.table)
library(dplyr)
library(ROSE)
bal <- read.csv2('analise_fraude2.csv')
View(bal)
bal <- bal[,-1]
setwd("C:/Users/Vanderlag/Downloads/ESTUDOS/FCD/Curso1_Big_Data_Analytics_com_R_e_Microsoft_Azure_Machine_Learning/Cap20-ProjetosComFeeedback/Projeto1")
bal <- read.csv2('analise_fraude2.csv')
View(bal)
bal <- bal[,-1]
class(bal$click_time)
bal$click_time <- as.POSIXlt(bal$click_time)
unclass(bal$click_time)
bal$day <- bal$click_time$mday
?POSIXt
bal$time <- strftime(bal$click_time,format = '%H:%M:%S')
View(bal)
bal <- bal[,-4]
View(bal)
library(randomForest)
knitr::opts_chunk$set(echo = TRUE)
```{r cars}
```{r setup, include=FALSE}
plot(pressure)
library(readr)
library(data.table)
library(dplyr)
library(ROSE)
df <- fread(file = 'train_sample.csv',header = T,stringsAsFactors = T,drop = 1, data.table=F)
table(df$is_attributed)
View(df)
df <- df%>%
select(-attributed_time)
100*prop.table(table(df$is_attributed))
table(bal$app)
bal <- ovun.sample(is_attributed~., data = df, method = 'over', p = 0.05)
bal <- bal$data
View(bal)
bal2 <- bal
bal[,1] <- bal2[,1]
View(bal2)
for (i in 1:nrow(bal)) {
if(bal2[i,1]<=20)bal[i,1]<-'0-20'
if((bal2[i,1]>20  & bal2[i,1]<=40)==TRUE)bal[i,1]<-'20-40'
if((bal2[i,1]>40  & bal2[i,1]<=100)==TRUE)bal[i,1]<-'40-100'
if((bal2[i,1]>100  & bal2[i,1]<=200)==TRUE)bal[i,1]<-'100-200'
if(bal2[i,1]>200) bal[i,1]<-'200-550'
}
unique(bal$app)
table(bal$app)
table(bal$device)
bal <- bal %>% mutate(device_n = bal[,2])
for (i in 1:nrow(bal)){
if(bal[i,2]>3)bal[i,7]<-'Other'
}
unique(bal$device_n)
table(bal$device_n)
bal <- bal%>%select(-device)
head(bal)
bal2 <- bal
table(bal$os)
length(table(bal$os))
for (i in 1:nrow(bal)) {
if(bal2[i,2]<=15)bal[i,2]<-'0-15'
if((bal2[i,2]>15  & bal2[i,2]<=30)==TRUE)bal[i,2]<-'15-30'
if((bal2[i,2]>30  & bal2[i,2]<=45)==TRUE)bal[i,2]<-'30-45'
if(bal2[i,2]>45) bal[i,2]<-'Other'
}
unique(bal$os)
unique(bal$channel)
View(table(bal$channel))
for (i in 1:nrow(bal)) {
if(bal2[i,4]<=100)bal[i,3]<-'0-100'
if((bal2[i,4]>100  & bal2[i,4]<=200)==TRUE)bal[i,3]<-'100-200'
if((bal2[i,4]>200  & bal2[i,4]<=300)==TRUE)bal[i,3]<-'200-300'
if((bal2[i,4]>300  & bal2[i,4]<=400)==TRUE)bal[i,3]<-'300-400'
if(bal2[i,4]>400) bal[i,3]<-'400-500'
}
require(ggplot2)
library(gridExtra)
plot1 <- ggplot(bal,aes(x = os)) + geom_bar()
plot2 <- ggplot(bal,aes(x = app)) + geom_bar()
plot3 <- ggplot(bal, aes(x = channel)) + geom_bar()
plot4 <- ggplot(bal, aes(x = device_n)) + geom_bar()
grid.arrange(plot1,plot2,plot3,plot4, ncol = 2)
table(bal$app)
class(bal$click_time)
bal$day <- bal$click_time$mday
unclass(bal$click_time)
class(bal$click_time)
bal$click_time <- as.POSIXct(bal$click_time,format="%Y-%m-%dT%H:%M:%S")
bal$day <- bal$click_time$mday
class(bal$click_time)
head(bal$click_time)
unclass(bal$click_time)
bal$click_time
bal$click_time <- as.POSIXct(bal$click_time,format="%Y-%m-%dT%H:%M:%S",tz = "UTC")
head(bal$click_time)
class(bal$click_time)
library(readr)
library(data.table)
library(dplyr)
library(ROSE)
df <- fread(file = 'train_sample.csv',header = T,stringsAsFactors = T,drop = 1, data.table=F)
table(df$is_attributed)
View(df)
df <- df%>%
select(-attributed_time)
100*prop.table(table(df$is_attributed))
table(bal$app)
bal <- ovun.sample(is_attributed~., data = df, method = 'over', p = 0.05)
bal <- bal$data
View(bal)
bal2 <- bal
bal[,1] <- bal2[,1]
View(bal2)
for (i in 1:nrow(bal)) {
if(bal2[i,1]<=20)bal[i,1]<-'0-20'
if((bal2[i,1]>20  & bal2[i,1]<=40)==TRUE)bal[i,1]<-'20-40'
if((bal2[i,1]>40  & bal2[i,1]<=100)==TRUE)bal[i,1]<-'40-100'
if((bal2[i,1]>100  & bal2[i,1]<=200)==TRUE)bal[i,1]<-'100-200'
if(bal2[i,1]>200) bal[i,1]<-'200-550'
}
bal$day <- as.POSIXct(bal$click_time,format="%d")
head(bal)
library(readr)
library(data.table)
library(dplyr)
library(ROSE)
df <- fread(file = 'train_sample.csv',header = T,stringsAsFactors = T,drop = 1, data.table=F)
table(df$is_attributed)
View(df)
df <- df%>%
select(-attributed_time)
100*prop.table(table(df$is_attributed))
table(bal$app)
bal <- ovun.sample(is_attributed~., data = df, method = 'over', p = 0.05)
bal <- bal$data
View(bal)
bal2 <- bal
bal[,1] <- bal2[,1]
View(bal2)
for (i in 1:nrow(bal)) {
if(bal2[i,1]<=20)bal[i,1]<-'0-20'
if((bal2[i,1]>20  & bal2[i,1]<=40)==TRUE)bal[i,1]<-'20-40'
if((bal2[i,1]>40  & bal2[i,1]<=100)==TRUE)bal[i,1]<-'40-100'
if((bal2[i,1]>100  & bal2[i,1]<=200)==TRUE)bal[i,1]<-'100-200'
if(bal2[i,1]>200) bal[i,1]<-'200-550'
}
bal <- bal[,-4]
library(randomForest)
class(bal$is_attributed)
bal$is_attributed <- as.factor(bal$is_attributed)
modelo1 <- randomForest(is_attributed ~ app + os + channel + device_n,
data = bal,
mtry = 2,
ntree = 200,
importance = TRUE)
head(bal)
library(readr)
library(data.table)
library(dplyr)
library(ROSE)
df <- fread(file = 'train_sample.csv',header = T,stringsAsFactors = T,drop = 1, data.table=F)
table(df$is_attributed)
View(df)
df <- df%>%
select(-attributed_time)
100*prop.table(table(df$is_attributed))
table(bal$app)
bal <- ovun.sample(is_attributed~., data = df, method = 'over', p = 0.05)
bal <- bal$data
View(bal)
bal2 <- bal
bal[,1] <- bal2[,1]
View(bal2)
for (i in 1:nrow(bal)) {
if(bal2[i,1]<=20)bal[i,1]<-'0-20'
if((bal2[i,1]>20  & bal2[i,1]<=40)==TRUE)bal[i,1]<-'20-40'
if((bal2[i,1]>40  & bal2[i,1]<=100)==TRUE)bal[i,1]<-'40-100'
if((bal2[i,1]>100  & bal2[i,1]<=200)==TRUE)bal[i,1]<-'100-200'
if(bal2[i,1]>200) bal[i,1]<-'200-550'
}
unique(bal$app)
table(bal$app)
table(bal$device)
bal <- bal %>% mutate(device_n = bal[,2])
for (i in 1:nrow(bal)){
if(bal[i,2]>3)bal[i,7]<-'Other'
}
unique(bal$device_n)
table(bal$device_n)
bal <- bal%>%select(-device)
head(bal)
bal2 <- bal
table(bal$os)
length(table(bal$os))
for (i in 1:nrow(bal)) {
if(bal2[i,2]<=15)bal[i,2]<-'0-15'
if((bal2[i,2]>15  & bal2[i,2]<=30)==TRUE)bal[i,2]<-'15-30'
if((bal2[i,2]>30  & bal2[i,2]<=45)==TRUE)bal[i,2]<-'30-45'
if(bal2[i,2]>45) bal[i,2]<-'Other'
}
unique(bal$os)
unique(bal$channel)
View(table(bal$channel))
for (i in 1:nrow(bal)) {
if(bal2[i,4]<=100)bal[i,3]<-'0-100'
if((bal2[i,4]>100  & bal2[i,4]<=200)==TRUE)bal[i,3]<-'100-200'
if((bal2[i,4]>200  & bal2[i,4]<=300)==TRUE)bal[i,3]<-'200-300'
if((bal2[i,4]>300  & bal2[i,4]<=400)==TRUE)bal[i,3]<-'300-400'
if(bal2[i,4]>400) bal[i,3]<-'400-500'
}
require(ggplot2)
library(gridExtra)
plot1 <- ggplot(bal,aes(x = os)) + geom_bar()
plot2 <- ggplot(bal,aes(x = app)) + geom_bar()
plot3 <- ggplot(bal, aes(x = channel)) + geom_bar()
plot4 <- ggplot(bal, aes(x = device_n)) + geom_bar()
grid.arrange(plot1,plot2,plot3,plot4, ncol = 2)
table(bal$app)
bal <- bal[,-5]
library(randomForest)
class(bal$is_attributed)
bal$is_attributed <- as.factor(bal$is_attributed)
class(bal$is_attributed)
head(bal)
head(bal2)
library(readr)
library(data.table)
library(dplyr)
library(ROSE)
df <- fread(file = 'train_sample.csv',header = T,stringsAsFactors = T,drop = 1, data.table=F)
table(df$is_attributed)
View(df)
df <- df%>%
select(-attributed_time)
100*prop.table(table(df$is_attributed))
table(bal$app)
bal <- ovun.sample(is_attributed~., data = df, method = 'over', p = 0.05)
bal <- bal$data
View(bal)
bal2 <- bal
bal[,1] <- bal2[,1]
View(bal2)
for (i in 1:nrow(bal)) {
if(bal2[i,1]<=20)bal[i,1]<-'0-20'
if((bal2[i,1]>20  & bal2[i,1]<=40)==TRUE)bal[i,1]<-'20-40'
if((bal2[i,1]>40  & bal2[i,1]<=100)==TRUE)bal[i,1]<-'40-100'
if((bal2[i,1]>100  & bal2[i,1]<=200)==TRUE)bal[i,1]<-'100-200'
if(bal2[i,1]>200) bal[i,1]<-'200-550'
}
unique(bal$app)
table(bal$app)
table(bal$device)
bal <- bal %>% mutate(device_n = bal[,2])
for (i in 1:nrow(bal)){
if(bal[i,2]>3)bal[i,7]<-'Other'
}
unique(bal$device_n)
table(bal$device_n)
bal <- bal%>%select(-device)
head(bal)
bal2 <- bal
table(bal$os)
length(table(bal$os))
for (i in 1:nrow(bal)) {
if(bal2[i,2]<=15)bal[i,2]<-'0-15'
if((bal2[i,2]>15  & bal2[i,2]<=30)==TRUE)bal[i,2]<-'15-30'
if((bal2[i,2]>30  & bal2[i,2]<=45)==TRUE)bal[i,2]<-'30-45'
if(bal2[i,2]>45) bal[i,2]<-'Other'
}
unique(bal$os)
unique(bal$channel)
View(table(bal$channel))
for (i in 1:nrow(bal)) {
if(bal2[i,4]<=100)bal[i,3]<-'0-100'
if((bal2[i,4]>100  & bal2[i,4]<=200)==TRUE)bal[i,3]<-'100-200'
if((bal2[i,4]>200  & bal2[i,4]<=300)==TRUE)bal[i,3]<-'200-300'
if((bal2[i,4]>300  & bal2[i,4]<=400)==TRUE)bal[i,3]<-'300-400'
if(bal2[i,4]>400) bal[i,3]<-'400-500'
}
require(ggplot2)
library(gridExtra)
plot1 <- ggplot(bal,aes(x = os)) + geom_bar()
plot2 <- ggplot(bal,aes(x = app)) + geom_bar()
plot3 <- ggplot(bal, aes(x = channel)) + geom_bar()
plot4 <- ggplot(bal, aes(x = device_n)) + geom_bar()
grid.arrange(plot1,plot2,plot3,plot4, ncol = 2)
table(bal$app)
library(randomForest)
head(bal)
class(bal$is_attributed)
bal$is_attributed <- as.factor(bal$is_attributed)
modelo1 <- randomForest(is_attributed ~ app + os + channel + device_n,
data = bal,
mtry = 2,
ntree = 200,
importance = TRUE)
class(bal$is_attributed)
head(bal)
head(bal)
View(bal2)
View(bal2)
```{r}
unique(bal$channel)
for (i in 1:nrow(bal)) {
if(bal2[i,3]<=100)bal[i,3]<-'0-100'
if((bal2[i,3]>100  & bal2[i,4]<=200)==TRUE)bal[i,3]<-'100-200'
if((bal2[i,3]>200  & bal2[i,4]<=300)==TRUE)bal[i,3]<-'200-300'
if((bal2[i,3]>300  & bal2[i,4]<=400)==TRUE)bal[i,3]<-'300-400'
if(bal2[i,3]>400) bal[i,3]<-'400-500'
}
plot1 <- ggplot(bal,aes(x = os)) + geom_bar()
plot2 <- ggplot(bal,aes(x = app)) + geom_bar()
plot3 <- ggplot(bal, aes(x = channel)) + geom_bar()
plot4 <- ggplot(bal, aes(x = device_n)) + geom_bar()
grid.arrange(plot1,plot2,plot3,plot4, ncol = 2)
unique(bal$channel)
for (i in 1:nrow(bal)) {
if(bal2[i,3]<=100)bal[i,3]<-'0-100'
if((bal2[i,3]>100  & bal2[i,3]<=200)==TRUE)bal[i,3]<-'100-200'
if((bal2[i,3]>200  & bal2[i,3]<=300)==TRUE)bal[i,3]<-'200-300'
if((bal2[i,3]>300  & bal2[i,3]<=400)==TRUE)bal[i,3]<-'300-400'
if(bal2[i,3]>400) bal[i,3]<-'400-500'
}
unique(bal$channel)
plot1 <- ggplot(bal,aes(x = os)) + geom_bar()
plot2 <- ggplot(bal,aes(x = app)) + geom_bar()
plot3 <- ggplot(bal, aes(x = channel)) + geom_bar()
plot4 <- ggplot(bal, aes(x = device_n)) + geom_bar()
grid.arrange(plot1,plot2,plot3,plot4, ncol = 2)
library(randomForest)
head(bal)
class(bal$is_attributed)
bal$is_attributed <- as.factor(bal$is_attributed)
modelo1 <- randomForest(is_attributed ~ app + os + channel + device_n,
data = bal,
mtry = 2,
ntree = 200,
importance = TRUE)
head(bal)
bal$app <- as.factor(bal$app)
bal$os <- as.factor(bal$os)
bal$channel <- as.factor(bal$channel)
bal$device_n <- as.factor(bal$device_n)
modelo1 <- randomForest(is_attributed ~ app + os + channel + device_n,
data = bal,
mtry = 2,
ntree = 200,
importance = TRUE)
modelo1
varImpPlot(modelo1, main = 'Nível de importância das variáveis preditoras')
dtreino <- bal %>% slice_sample(prop = 0.75,replace = T)
dteste <- bal %>% slice_sample(prop = 0.25,replace = T)
str(dteste)
str(dtreino)
modelo2 <- randomForest(is_attributed ~ app + os + channel + device_n,
data = dtreino,
mtry = 2,
ntree = 500,
importance = TRUE)
modelo2
modelo2.1 <- randomForest(is_attributed ~ app  + channel + device_n,
data = dtreino,
mtry = 2,
ntree = 500)
modelo2.1
library(e1071)
modelo3 <- naiveBayes(is_attributed ~ app  + os + channel + device_n,
data = dtreino)
modelo3
predict3 <- predict(modelo3,newdata = dteste)
dteste$Previsao <- predict3
table(dteste$Previsao)
table(dteste$is_attributed)
cm <- table(dteste$is_attributed,dteste$Previsao)
library(caret)
confusionMatrix(cm)
predict2 <- predict(modelo2,newdata = dteste)
cm2 <- table(dteste$is_attributed,predict2)
confusionMatrix(cm2)
